[{"id":"ace7772.d677a88","type":"http in","z":"6fc3ed9b.d7cf04","name":"","url":"/flickr","method":"get","upload":false,"swaggerDoc":"","x":140,"y":100,"wires":[["d0c9e3f9.d4854"]]},{"id":"d088ac8b.aa21e","type":"http request","z":"6fc3ed9b.d7cf04","name":"Flickr Request","method":"GET","ret":"obj","url":"","tls":"","x":504,"y":100,"wires":[["8913f0f6.cebad"]]},{"id":"d0c9e3f9.d4854","type":"function","z":"6fc3ed9b.d7cf04","name":"API URL","func":"if( msg.payload && msg.payload.page ) {\n msg.page = msg.payload.page * 1;\n} else {\n    msg.page = 1;\n}\nif( msg.payload && msg.payload.net ) {\n msg.network = msg.payload.net;\n} else {\n msg.network = 1; // 1:keras 2:chainer\n}\nif( msg.payload && msg.payload.net ) {\n msg.tag = msg.payload.tag;\n} else {\n msg.tag = 'zoo';\n}\n\nmsg.url = \"https://api.flickr.com/services/rest/\";\nmsg.url += \"?method=flickr.photos.search\";\nmsg.url += \"&api_key=976c217175e13ca5570bd700b98d3b74\";\nmsg.url += \"&format=json\";\nmsg.url += \"&nojsoncallback=1\";\n//msg.url += \"&tags=animal,face,portrait,zoo\";\nmsg.url += \"&tags=\" + msg.tag;\nmsg.url += \"&tag_mode=all\";\nmsg.url += \"&per_page=16\";\nmsg.url += \"&page=\" + msg.page;\nreturn msg;\n","outputs":1,"noerr":0,"x":310,"y":100,"wires":[["d088ac8b.aa21e"]]},{"id":"8913f0f6.cebad","type":"function","z":"6fc3ed9b.d7cf04","name":"image catalog","func":"if(msg.payload.stat==\"fail\") {\n    msg.payload = msg.payload.message;\n    return msg;\n}\nconst photos = msg.payload.photos.photo;\nvar html = \"\";\n\n// prev next link to\nhtml += '<div>';\nvar prev = msg.page-1;\nvar next = msg.page+1;\nif(prev>0) {\n    html += '<a href=\"?page='+prev+'&net='+msg.network+'&tag='+msg.tag+'\"> [PREV] </a>';\n}\nif(next<=msg.payload.photos.pages) {\n    html += '<a href=\"?page='+next+'&net='+msg.network+'&tag='+msg.tag+'\"> [NEXT] </a>';\n}\nhtml += '</div>';\n\nfor(i=0; i<photos.length; i++)\n{\n    p = photos[i];\n    url = 'http://farm'+p.farm+'.static.flickr.com/'+p.server+'/'+p.id+'_'+p.secret;\n html += '<img src=\"'+url+'_q.jpg\"';\n    html += ' onclick=\"doSend(\\''+msg.network+' '+url+'.jpg\\');\"/>';\n}\n\n// info\nhtml += '<div class=\"notranslate\">';\nhtml += ' page=' + msg.payload.photos.page;\nhtml += ' pages=' + msg.payload.photos.pages;\nhtml += ' total=' + msg.payload.photos.total;\nhtml += '</div>';\n\nmsg.payload = html;\nreturn msg;\n","outputs":1,"noerr":0,"x":291,"y":209,"wires":[["a7695b97.8eb218"]]},{"id":"1a9a893e.5f1897","type":"http response","z":"6fc3ed9b.d7cf04","name":"","statusCode":"","headers":{},"x":608,"y":209,"wires":[]},{"id":"a7695b97.8eb218","type":"template","z":"6fc3ed9b.d7cf04","name":"html","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"<head>\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/chartist.js/latest/chartist.min.css\" />\n</head>\n\n<div id=\"google_translate_element\"></div>\n<script type=\"text/javascript\">\n    function googleTranslateElementInit() {\n\tnew google.translate.TranslateElement({pageLanguage: 'en'}, 'google_translate_element');\n    }\n</script><script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit\"></script>\n\n<!-- Content -->\n<script language=\"javascript\" type=\"text/javascript\">\n\nvar wsUri = \"ws://\" + location.hostname + \":1880/ws/flickr\";\nvar console;\nvar result;\nvar image;\n\nfunction init()\n{\n    console = document.getElementById(\"console\");\n    result = document.getElementById(\"result\");\n    image = document.getElementById(\"image\");\n\n    websocket = new WebSocket(wsUri);\n    websocket.onopen = function(evt) { onOpen(evt) };\n    websocket.onclose = function(evt) { onClose(evt) };\n    websocket.onmessage = function(evt) { onMessage(evt) };\n    websocket.onerror = function(evt) { onError(evt) };\n}\nfunction onOpen(evt)\n{\n    writeToConsole(\"CONNECTED\");\n}\nfunction onClose(evt)\n{\n    writeToConsole(\"DISCONNECTED\");\n}\nfunction onMessage(evt)\n{\n    //writeToResult('<span style=\"color: blue;\">' + evt.data+'</span>');\n    writeToResult(evt.data);\n}\nfunction onError(evt)\n{\n    writeToConsole('<span style=\"color: red;\">ERROR:</span> ' + evt.data);\n}\nfunction doSend(message)\n{\n    writeToConsole(\"SENT: \" + message);\n    writeToImage(message.split(' ')[1]);\n    writeToResult(\"recognizing...\");\n    websocket.send(message);\n}\nfunction writeToConsole(message)\n{\n    var pre = document.createElement(\"p\");\n    pre.style.wordWrap = \"break-word\";\n    pre.innerHTML = message;\n    console.appendChild(pre);\n}\nfunction writeToResult(message)\n{\n    var pre = document.createElement(\"span\");\n    pre.style.wordWrap = \"break-word\";\n    pre.innerHTML = message;\n    result.replaceChild(pre,result.firstChild);\n}\nfunction writeToImage(url)\n{\n    var img = document.createElement(\"img\");\n    img.src = url;\n    image.replaceChild(img,image.firstChild);\n}\n\nwindow.addEventListener(\"load\", init, false);\n</script>\n\n<h2>ResNet DEMO</h2>\n<div align=\"right\" class=\"notranslate\">\n    tag=\"検索キーワード,,,\"\n<br> net={1:Keras, 2:Chainer}\n</div>\n\n{{{payload}}}\n<hr/>\n<table><tr>\n<td id=\"image\">image\n<td id=\"result\">result\n</table>\n<hr/>\n<span class=\"notranslate\" id=\"console\">console</span>\n","output":"str","x":463,"y":209,"wires":[["1a9a893e.5f1897"]]},{"id":"a2208dc4.6d45","type":"websocket in","z":"6fc3ed9b.d7cf04","name":"","server":"e4c5ae76.3af6b","client":"","x":108,"y":381,"wires":[["9b1889ba.b78138"]]},{"id":"26cd882e.cda418","type":"websocket out","z":"6fc3ed9b.d7cf04","name":"","server":"e4c5ae76.3af6b","client":"","x":641,"y":668,"wires":[]},{"id":"8987e007.c8eaa","type":"python-function","z":"6fc3ed9b.d7cf04","name":"Keras","func":"from keras.applications.resnet50 import ResNet50\nfrom keras.preprocessing import image\nfrom keras.applications.resnet50 import preprocess_input, decode_predictions\nimport numpy as np\nimport json\nimport time\n\nstart = time.time()\nmodel = ResNet50(weights='imagenet')\n\nimg_path = msg['payload']\nimg = image.load_img(img_path, target_size=(224, 224))\n\nx = image.img_to_array(img)\nx = np.expand_dims(x, axis=0)\nx = preprocess_input(x)\n\npreds = model.predict(x)\nps = decode_predictions(preds, top=3)[0];\n\n# json serialize\nj = json.dumps( [{\"pre\": p[1], \"per\": str(int(p[2]*100)) } for p in ps] )\nmsg['payload'] = j\nmsg['elapsed'] = time.time() - start\n\nreturn msg","outputs":1,"x":374,"y":463,"wires":[["53fbc433.b6c2bc"]]},{"id":"9b1889ba.b78138","type":"function","z":"6fc3ed9b.d7cf04","name":"get image","func":"const args = msg.payload.split(' ');\nconst choose = args[0];\nconst url = args[1];\nconst file_path = '/tmp/flickr.jpg';\n\nconst download = context.global.imagedownloader;\nconst options = {\n    url: url,\n    dest: file_path\n}\ndownload.image(options)\n    .then(( {filename, image }) => {\n        msg.payload = file_path;\n        msg.choose = choose * 1;\n        node.send(msg);\n    }).catch((err) => {\n        throw err\n    })\n","outputs":1,"noerr":0,"x":290,"y":384,"wires":[["70c9f83.4f19008"]]},{"id":"41813ee.dd51ac","type":"function","z":"6fc3ed9b.d7cf04","name":"chart result","func":"var sum = 0;\nsum += msg.payload[0].per * 1;\nsum += msg.payload[1].per * 1;\nsum += msg.payload[2].per * 1;\n\nmsg.payload[0].pre = msg.payload[0].pre.replace(/_/g,\" \");\nmsg.payload[1].pre = msg.payload[1].pre.replace(/_/g,\" \");\nmsg.payload[2].pre = msg.payload[2].pre.replace(/_/g,\" \");\n\nconst co = context.global.co;\nconst chartist = context.global.chartist;\nco( function *() {\n    const options = {\n\twidth: 300,\n\theight: 300,\n\tlabelOffset: 20,\n\tchartPadding: 30,\n    };\n    const data = {\n\tlabels: [\n            msg.payload[0].pre,\n            msg.payload[1].pre,\n            msg.payload[2].pre,\n            \"unknown\"\n\t],\n\tseries: [\n            msg.payload[0].per * 1,\n            msg.payload[1].per * 1,\n            msg.payload[2].per * 1,\n            100 - sum\n\t]\n    };\n\n\n    var table = '<table>';\n    table += '<tr>';\n    table += '<th class=\"notranslate\">' + ['','Keras','Chainer'][msg.choose];\n    table += '<th>' + msg.elapsed + \" sec\";\n    table += '<tr>';\n    table += '<td>' + msg.payload[0].pre;\n    table += '<td>' + msg.payload[0].per + '%';\n    table += '<tr>';\n    table += '<td>' + msg.payload[1].pre;\n    table += '<td>' + msg.payload[1].per + '%';\n    table += '<tr>';\n    table += '<td>' + msg.payload[2].pre;\n    table += '<td>' + msg.payload[2].per + '%';\n    table += '</table>';\n\n    const chart = yield chartist('pie', options, data);\n\n    msg.payload = '<table><tr><td>'+chart+'<td>'+table+'</table>';\n    node.send(msg);\n});\n//return(msg);\n","outputs":"1","noerr":0,"x":441,"y":668,"wires":[["26cd882e.cda418"]]},{"id":"53fbc433.b6c2bc","type":"json","z":"6fc3ed9b.d7cf04","name":"json translate","pretty":true,"x":580,"y":494,"wires":[["41813ee.dd51ac"]]},{"id":"8a088a48.a70cb8","type":"comment","z":"6fc3ed9b.d7cf04","name":"Web-Server","info":"/flickrにアクセスするとFlickrからイ����ジ検��したリストから\nイメ��ジ��タログ��作成して表示する���\n","x":104,"y":47,"wires":[]},{"id":"e0930e8a.8cae5","type":"comment","z":"6fc3ed9b.d7cf04","name":"ResNet処理部","info":"WebページからWebSocketを通じて選択��たイメージを取���。\nResnetにかけて��果を表とPieチ���ー��で返す","x":107,"y":327,"wires":[]},{"id":"274c27e4.0db468","type":"python-function","z":"6fc3ed9b.d7cf04","name":"Chainer","func":"import chainer\nimport cv2\nimport numpy as np\nimport os\nimport sys\nimport json\nimport time\n\nstart = time.time()\n\n#model_name = 'resnet50'\n#model_name = 'resnet101'\nmodel_name = 'resnet152'\n\nsave_cwd = os.getcwd()\nsave_path = sys.path\nos.chdir( os.getcwd() + '/chainer-ResNet/v2' )\nsys.path.append( os.getcwd() )\n\nimg_path = msg['payload']\nimg = cv2.imread(img_path)\nimg = cv2.resize(img, (224, 224))\nx_data = img.transpose(2, 0, 1).astype(np.float32)[np.newaxis, :, :, :]\nx_data -= np.load('data/mean.npy')\n\nmodel = __import__(model_name).ResNet()\nchainer.serializers.load_npz('{}.npz'.format(model_name), model)\nif chainer.cuda.available:\n    os.environ['CUDA_VISIBLE_DEVICES'] = str(args.gpu)\n    model.to_gpu()\n    x_data = chainer.cuda.to_gpu(x_data)\n\nx_data = chainer.Variable(x_data)\nwith chainer.using_config('train', False):\n    preds = model(x_data)\n    preds = chainer.cuda.to_cpu(preds.data)\n\nwith open('data/synset_words.txt') as f:\n    synset = f.read().split('\\n')[:-1]\n\n# from keras/applications/imagenet_utils/decode_predictions(preds,top)\ntop = 3\nresults = []\nfor pred in preds:\n    top_indices = pred.argsort()[-top:][::-1]\n    result = [(synset[i].split(' ',1)[1],pred[i],) for i in top_indices]\n    result.sort(key=lambda x: x[1], reverse=True)\n    results.append(result)\n\n# json serialize\nj = json.dumps( [{\"pre\": p[0], \"per\": str(p[1]) } for p in results[0]] )\nmsg['payload'] = j\nmsg['elapsed'] = time.time() - start\n\nos.chdir(save_cwd)\nsys.path = save_path\nreturn msg\n","outputs":1,"x":385,"y":535,"wires":[["53fbc433.b6c2bc"]]},{"id":"70c9f83.4f19008","type":"switch","z":"6fc3ed9b.d7cf04","name":"","property":"choose","propertyType":"msg","rules":[{"t":"eq","v":"1","vt":"num"},{"t":"eq","v":"2","vt":"num"}],"checkall":"true","outputs":2,"x":214,"y":495,"wires":[["8987e007.c8eaa"],["274c27e4.0db468"]]},{"id":"e4c5ae76.3af6b","type":"websocket-listener","z":"","path":"/ws/flickr","wholemsg":"false"}]